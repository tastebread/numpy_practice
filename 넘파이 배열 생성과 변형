#배열 생성과 변형
import numpy as np

print("넘파이 자료형")
print("\n")

x = np.array([1,2,3], dtype='f')
print("자료형 명시적으로 지정하려면 dytpe 쓴다 : {}".format(x.dtype))
print("\n")

#넘파이 배열 생성 명령어
a = np.zeros(5) #크기가 정해져있고 모든 값이 0 인 배열을 생성할
b = np.zeros((2,3)) #크기를 뜻하는 튜플을 입력하면 다차원 배열로도 만들 수 있다
print("크기가 정해져 있고 모든 값이 0 인 배열 : {}".format(a))
print("\n")
e = np.ones((2,3,4), dtype='i8')
print("0이 아닌 1로 초기화된 배열을 생성하려면 ones 명령어 사용 : {} ".format(e))
f = np.ones_like(b,dtype='f') # 크기를 명시하지않고 다른 배열과 같은 크기의 배열을 생성할때
# ones_like 혹은 zeros_like 사용
print("\n")

print("arange : range 명령과 같 규칙에 따라 증가하는 수열을 만듬")
print("np.arange(10) : {}".format(np.arange(10)))
print("np.arange(3,21,2) 시작, 끝,단계(규칙) : {}".format(np.arange(3,21,2)))
#np.linspace(0,100,5) : 선형구간 을 지정한 구간의 수만큼 분할
#np.logspace(0.1, 1, 10) : 로그구간 을 지정한 구간의 수만큼 분
print("\n")

#전치연산 : 행과 열 바꾸는 작업
print("전치연산")
A = np.array([[1,2,3], [4,5,6]])
print(A)
print("\n")
print("행과 열을 바꿈 : {}".format(A.T))
print("\n")
#배열의 크기 변형
print("배열의 크기 변형")
g = np.arange(12)
print(g)
h = g.reshape(3,4) # .reshape -> 배열 내부 데이터를 보존하면서 형태만 바꾸려면 reshape 사용
print(h)

#다차원 배열을 1차원으로 만들기 위해서 flatten , ravel 메서드 사용
#a.flatten() , a.ravel()

import numpy as np

#2차원 배열
print("2차원 배열")
c = np.array([[0,1,2],[3,4,5]]) #2차원 배열 numpy
print(c)
print("행 : {} 열 : {}".format(len(c),len(c[0])))
print("\n")

#연습문제1 2차원 배열 만들기
print("연습문제1 2차원 배열 만들기")
p_1= np.array([[10,20,30,40],[50,60,70,80]])
print(p_1, type(p_1))

#3차원배열
print("\n")
print("3차원배열")
d = np.array([[[1,2,3,4],
               [5,6,7,8],
               [9,10,11,12]],
             [[11,12,13,14],
              [15,16,17,18],
              [19,20,21,22]]])

print(d,type(d))
print("깊이 : {} 행 : {} 열 : {}".format(len(d),len(d[0]),len(d[0][0])))
print("\n")
#배열의 차원과 크기 알아내기
print("배열의 차원과 크기 알아내기")
a = np.array([1,2,3])
print(a)
print("배열의 차원 : {} ".format(a.ndim)) #배열의 차원 구하기
print("배열의 속성(크기) : {} ".format(a.shape)) #배열의 속성(크기) 구하기
print("\n")

#배열의 인덱싱
print("배열의 인덱싱")
#배열의 인덱싱은 리스트의 인덱싱과 같다

print(c[0,0]) #첫번째 행의 첫번째 열
print(c[0,1]) #첫번째 행의 두번째 열
print(c[-1,-1]) # 마지막 행의 마지막 열
print("\n")
print("배열 슬라이싱")
#일반적인 슬라이싱 과 콤마(,)를 함께 사용하면된다
print(c[0, :]) #첫번째 행의 전체
print(c[:, 1]) #두번째 열의 전체
print(c[1, 1:]) # 두번째 행 의 두번 째 열부터 끝까지
print(c[:2, :2]) #첫번째 행의 2번째 원소, #첫번째 열의 두번째 원소 까지
print("\n")

#연습문제2 배열슬라이싱
print("연습문제2 배열슬라이싱")
p_2 = np.array([[0,1,2,3,4],
                [5,6,7,8,9],
                [10,11,12,13,14]])
print("1.이 행렬에서 값 7을 인덱싱한다 : {}".format(p_2[1,2]))
print("2.이 행렬에서 값 14을 인덱싱한다 : {}".format(p_2[2,4]))
print("3.이 행렬에서 배열 [6,7]을 슬라이싱 한다 : {}".format(p_2[1, 1:3]))
print("4.이 행렬에서 배열 [7,12]을 슬라이싱한다 : {}".format(p_2[1:, 2]))
print("5.이 행렬에서 배열[[3,4],[8,9]] 슬라이싱한다 : {}".format(p_2[:2,3:]))
print("\n")
#배열 인덱싱
print("배열 인덱싱")
b = np.array([0,1,2,3,4,5,6,7,8,9])
idx = np.array([True,False,True,False,True,
                False,True,False,True,False])
print(b[idx])
print(b % 2 == 0 ,type(a))
print(b[b % 2 == 0])
print("\n")
print("정수 배열 인덱싱")
b_1 = np.array([11,22,33,44,55,66,77,88,99])
idx = np.array([0,2,4,6,8])
print(b_1[idx])
print("\n")
#연습문제 3
print("연습문제3 배열 인덱싱")
p_03 = np.array([1,2,3,4,5,6,7,8,9,10,
                 11,12,13,14,15,16,17,18,19,20])
print("1.이 배열에서 3의 배수를 찾아라. : {}".format(p_03[p_03 % 3 == 0]))
print("2.이 배열에서 4로 나누면 1이 남는 수를 찾아라. : {}".format(p_03[p_03 % 4 == 1]))
print("3.이 배열에서 3으로 나누면 나누어지 4로 나누면 1이 남는 수를 찾아라. : {}".format(p_03[(p_03 % 3 == 0) & (p_03 % 4 == 1)]))
